#!/usr/bin/env python3

from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
import numpy as np
import pandas as pd
import math
import metnum
import time
import os

def work(X, y, clf, k):

    accuracy = []

    kf = KFold(n_splits=k)
    i = 1
    for train_index, test_index in kf.split(X):
        print(f"{os.getpid()} == kfold iteración {i}/{k}")

        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y[train_index], y[test_index]

        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)

        accuracy.append(accuracy_score(y_test, y_pred))
        i += 1

    return np.mean(accuracy)

def makePartitionAndWork(X, y, k_knn, kfold, partition_size=200):

    results = []

    accumulator = 0

    clf = metnum.KNNClassifier(k_knn)

    while True:
        part_X = X.head(accumulator + partition_size)
        part_y = y.head(accumulator + partition_size)

        print(f"{os.getpid()} == train size: {part_X.shape[0]} ==")

        accuracy = work(part_X, part_y, clf, kfold)

        results.append((part_X.shape[0], accuracy))

        accumulator += partition_size

        if accumulator >= X.shape[0]:
            break

    return results

def main(
    universe_size:("tamaño a tomar del dataset original para hacer las pruebas [5000]")=5000,
    partition_size:("tamaño de partición para hacer una prueba incremental [4000]")=math.ceil(5000*0.8),
    knn:("parámetro de knn [10]")=10,
    kfold:("parámetro de kfold [10]")=10,
    train_set_proportion:("relación de tamaño de trainset vs testset [0.8]")=0.8,
    filename:("nombre de archivo donde dumpear el csv [result.csv]")="result.csv"
    ):
    "Pruebas para Knn"

    assert universe_size * train_set_proportion >= partition_size

    df_train = pd.read_csv("../data/train.csv")
    df_train = df_train[:universe_size]
    X = df_train[df_train.columns[1:]]
    y = df_train["label"]

    limit = int(train_set_proportion * X.shape[0]) 

    X_train, y_train = X[:limit], y[:limit]

    assert len(X_train) == len(y_train)

    print(
    f"""
        {os.getpid()} Pruebas para Knn

        {os.getpid()} filename={filename}
        {os.getpid()} universe_size={universe_size}
        {os.getpid()} train_set_proportion={train_set_proportion}
        {os.getpid()} partition_size={partition_size}
        {os.getpid()} knn={knn}
        {os.getpid()} kfold={kfold}

        {os.getpid()} train set final de {X_train.shape[0]} elementos
    """
    )

    result = np.array([]).reshape(0, 4)

    begin = time.time()
    configs = makePartitionAndWork(X_train, y_train, knn, kfold, partition_size)
    end = time.time()

    for train_size, accuracy in configs:
        result = np.append(result, [[train_size, kfold, knn, accuracy]], axis=0)

    f=open(filename,'ab')
    np.savetxt(f, result, delimiter=",")
    print(f"{os.getpid()} escribió en archivo {result.shape[0]} lineas")
    f.close()

    print(f"{os.getpid()} duration: {end - begin}")

    exit(0)


if __name__ == '__main__':
    import plac; plac.call(main)